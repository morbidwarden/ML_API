# -*- coding: utf-8 -*-
"""Untitled20.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1s1V1Z8Bgo8zBCPoya0wP9fNmK28RhyJZ
"""

import tensorflow as tf

import os
import matplotlib.pyplot as plt
from PIL import Image
import math

dir_example = "dataset"

classes = os.listdir(dir_example)
print(classes)

dir_example = "dataset/Train"

train_classes = os.listdir(dir_example)
print(train_classes)

from tensorflow.keras.models import Sequential # type: ignore
from keras.layers import Conv2D, Flatten, MaxPooling2D, Dense, Dropout, SpatialDropout2D # type: ignore
from tensorflow.keras.losses import sparse_categorical_crossentropy, binary_crossentropy
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train = 'dataset/Train'
test = 'dataset/Test'

train_generator = ImageDataGenerator(rescale = 1/255)

train_generator = train_generator.flow_from_directory(train,
                                                      target_size = (300,300),
                                                      batch_size = 32,
                                                      class_mode = 'sparse')

labels = (train_generator.class_indices)
print(labels,'\n')

labels = dict((v,k) for k,v in labels.items())
print(labels)

for image_batch, label_batch in train_generator:
  break
image_batch.shape, label_batch.shape

test_generator = ImageDataGenerator(rescale = 1./255)

test_generator = test_generator.flow_from_directory(test,
                                                    target_size = (300,300),
                                                    batch_size = 32,
                                                    class_mode = 'sparse')

test_labels = (test_generator.class_indices)
print(test_labels,'\n')

test_labels = dict((v,k) for k,v in test_labels.items())
print(test_labels)

print(train_generator.class_indices)
Labels = '\n'.join(sorted(train_generator.class_indices.keys()))

with open('Labels.txt', 'w') as file:
  file.write(Labels)

import os
os.environ['TF_ENABLE_ONEDNN_OPTS'] = '1'

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout

model = Sequential()

# Convolution blocks
model.add(Conv2D(32, kernel_size=(3,3), padding='same', input_shape=(300,300,3), activation='relu'))
model.add(MaxPooling2D(pool_size=2))

model.add(Conv2D(64, kernel_size=(3,3), padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=2))

model.add(Conv2D(32, kernel_size=(3,3), padding='same', activation='relu'))
model.add(MaxPooling2D(pool_size=2))

# Classification layers
model.add(Flatten())

model.add(Dense(64, activation='relu'))
model.add(Dropout(0.2))
model.add(Dense(32, activation='relu'))

model.add(Dropout(0.2))
model.add(Dense(6, activation='softmax'))

model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])
model.summary()

model.fit(train_generator, epochs=20)

import keras.utils as ku
import numpy as np


# testing the model


test_img = '/content/gettyimages-95907034-612x612.jpg'
img = ku.load_img(test_img, target_size = (300,300))
img = ku.img_to_array(img, dtype=np.uint8)
img = np.array(img)/255.0
prediction = model.predict(img[np.newaxis, ...])

#print("Predicted shape",p.shape)
print("Probability:",np.max(prediction[0], axis=-1))
predicted_class = labels[np.argmax(prediction[0], axis=-1)]
print("Classified:",predicted_class,'\n')

# plt.axis('off')
# plt.imshow(img.squeeze())
# plt.title("Loaded Image")

# test_img = '/content/images (22).jpeg'
# img = ku.load_img(test_img, target_size = (300,300))
# img = ku.img_to_array(img, dtype=np.uint8)
# img = np.array(img)/255.0
# prediction = model.predict(img[np.newaxis, ...])

# #print("Predicted shape",p.shape)
# print("Probability:",np.max(prediction[0], axis=-1))
# predicted_class = labels[np.argmax(prediction[0], axis=-1)]
# print("Classified:",predicted_class,'\n')

# plt.axis('off')
# plt.imshow(img.squeeze())
# plt.title("Loaded Image")

# test_img = '/content/IMG_20240101_185514-scaled.jpg'
# img = ku.load_img(test_img, target_size = (300,300))
# img = ku.img_to_array(img, dtype=np.uint8)
# img = np.array(img)/255.0
# prediction = model.predict(img[np.newaxis, ...])

# #print("Predicted shape",p.shape)
# print("Probability:",np.max(prediction[0], axis=-1))
# predicted_class = labels[np.argmax(prediction[0], axis=-1)]
# print("Classified:",predicted_class,'\n')

# plt.axis('off')
# plt.imshow(img.squeeze())
# plt.title("Loaded Image")



# """epoch = 10    acc = 61%
# epoch = 20    acc = 94%
# """